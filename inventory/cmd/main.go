package main

import (
	"context"
	"fmt"
	"os/signal"
	"syscall"
	"time"

	"github.com/Daniil-Sakharov/RocketFactory/inventory/internal/app"
	"github.com/Daniil-Sakharov/RocketFactory/inventory/internal/config"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/closer"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/logger"
	"go.uber.org/zap"
)

func main() {
	appCtx, appCancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer appCancel()
	defer gracefulShutdown()

	// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–∞–Ω–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	defer func() {
		if r := recover(); r != nil {
			logger.Error(appCtx, "üî• PANIC occurred", zap.Any("panic", r))
			panic(r) // –ü–æ–≤—Ç–æ—Ä–Ω–æ –±—Ä–æ—Å–∞–µ–º –ø–∞–Ω–∏–∫—É
		}
	}()

	// .env —Ñ–∞–π–ª –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω:
	// - –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
	// - –í Docker: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ environment (-e —Ñ–ª–∞–≥–∏)
	err := config.Load()
	if err != nil {
		logger.Error(appCtx, "‚ùå Failed to load config", zap.Error(err))
		panic(fmt.Errorf("error to load config: %w", err))
	}
	logger.Info(appCtx, "‚úÖ Config loaded")

	closer.Configure(syscall.SIGINT, syscall.SIGTERM)

	logger.Info(appCtx, "üèóÔ∏è Creating application...")
	a, err := app.New(appCtx)
	if err != nil {
		logger.Error(appCtx, "‚ùå Failed to create app", zap.Error(err))
		return
	}
	logger.Info(appCtx, "‚úÖ Application created")

	logger.Info(appCtx, "üöÄ Running application...")
	err = a.Run(appCtx)
	if err != nil {
		logger.Error(appCtx, "‚ùå App.Run() returned error", zap.Error(err))
		return
	}

	logger.Info(appCtx, "üëã Application exited normally")
}

func gracefulShutdown() {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := closer.CloseAll(ctx); err != nil {
		logger.Error(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã", zap.Error(err))
	}
}
