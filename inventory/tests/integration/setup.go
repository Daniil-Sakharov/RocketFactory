//go:build integration

package integration

import (
	"context"
	"os"
	"time"

	"github.com/docker/go-connections/nat"
	"github.com/testcontainers/testcontainers-go/wait"
	"go.uber.org/zap"

	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/logger"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/testcontainers"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/testcontainers/app"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/testcontainers/mongo"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/testcontainers/network"
	"github.com/Daniil-Sakharov/RocketFactory/platform/pkg/testcontainers/path"
)

const (
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	inventoryAppName    = "inventory-app"
	inventoryDockerfile = "deploy/docker/inventory/Dockerfile"

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	grpcHostKey = "GRPC_HOST"
	grpcPortKey = "GRPC_PORT"

	// –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	grpcHostValue    = "0.0.0.0"
	loggerLevelValue = "debug"
	startupTimeout   = 45 * time.Minute // –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞ (go mod download –∑–∞–Ω–∏–º–∞–µ—Ç ~15 –º–∏–Ω—É—Ç)
)

type TestEnvironment struct {
	Network *network.Network
	Mongo   *mongo.Container
	App     *app.Container
}

func setupTestEnvironment(ctx context.Context) *TestEnvironment {
	logger.Info(ctx, "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
	logger.Info(ctx, "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Docker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")

	generatedNetwork, err := network.NewNetwork(ctx, projectName)
	if err != nil {
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—â—É—é —Å–µ—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ: docker ps)",
			zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –°–µ—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

	mongoUsername := getEnvWithLogging(ctx, testcontainers.MongoUsernameKey)
	mongoPassword := getEnvWithLogging(ctx, testcontainers.MongoPasswordKey)
	mongoImageName := getEnvWithLogging(ctx, testcontainers.MongoImageNameKey)
	mongoDatabase := getEnvWithLogging(ctx, testcontainers.MongoDatabaseKey)

	grpcPort := getEnvWithLogging(ctx, grpcPortKey)

	generatedMongo, err := mongo.NewContainer(ctx,
		mongo.WithNetworkName(generatedNetwork.Name()),
		mongo.WithContainerName(testcontainers.MongoContainerName),
		mongo.WithImageName(mongoImageName),
		mongo.WithDatabase(mongoDatabase),
		mongo.WithAuth(mongoUsername, mongoPassword),
		mongo.WithLogger(logger.Logger()),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork})
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	projectRoot := path.GetProjectRoot()

	appEnv := map[string]string{
		// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç MongoDB –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∏–∑ testcontainers
		testcontainers.MongoHostKey:     generatedMongo.Config().ContainerName,
		testcontainers.MongoPortKey:     testcontainers.MongoPort,
		testcontainers.MongoDatabaseKey: mongoDatabase,
		testcontainers.MongoUsernameKey: mongoUsername,
		testcontainers.MongoPasswordKey: mongoPassword,
		testcontainers.MongoAuthDBKey:   getEnvWithLogging(ctx, testcontainers.MongoAuthDBKey),
		grpcHostKey:                     grpcHostValue,
		grpcPortKey:                     grpcPort,
		"LOGGER_LEVEL":                  loggerLevelValue,
		"LOGGER_AS_JSON":                "true",
	}

	logger.Info(ctx, "üöÄ Starting app container",
		zap.String("network", generatedNetwork.Name()),
		zap.String("mongo_host", generatedMongo.Config().ContainerName),
		zap.String("grpc_host", grpcHostValue),
		zap.String("grpc_port", grpcPort),
		zap.Any("env", appEnv))

	waitStrategy := wait.ForListeningPort(nat.Port(grpcPort + "/tcp")).
		WithStartupTimeout(startupTimeout)

	appContainer, err := app.NewContainer(ctx,
		app.WithName(inventoryAppName),
		app.WithPort(grpcPort),
		app.WithDockerfile(projectRoot, inventoryDockerfile),
		app.WithNetwork(generatedNetwork.Name()),
		app.WithEnv(appEnv),
		app.WithLogOutput(os.Stdout),
		app.WithStartupWait(waitStrategy),
		app.WithLogger(logger.Logger()),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork, Mongo: generatedMongo})
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ mapped port
	// testcontainers –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–æ mapped port —Å–Ω–∞—Ä—É–∂–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ ready
	logger.Info(ctx, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ mapped port...")
	time.Sleep(5 * time.Second)

	logger.Info(ctx, "üéâ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
	return &TestEnvironment{
		Network: generatedNetwork,
		Mongo:   generatedMongo,
		App:     appContainer,
	}
}

func getEnvWithLogging(ctx context.Context, key string) string {
	value := os.Getenv(key)
	if value == "" {
		logger.Warn(ctx, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", zap.String("key", key))
	}

	return value
}
