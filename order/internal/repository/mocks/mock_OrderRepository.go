// Code generated by mockery. DO NOT EDIT.
// Â© Daniil-Sakharov 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	domain "github.com/Daniil-Sakharov/RocketFactory/order/internal/model/domain"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, order
func (_m *OrderRepository) Create(ctx context.Context, order *domain.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order *domain.Order
func (_e *OrderRepository_Expecter) Create(ctx interface{}, order interface{}) *OrderRepository_Create_Call {
	return &OrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *OrderRepository_Create_Call) Run(run func(ctx context.Context, order *domain.Order)) *OrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Order))
	})
	return _c
}

func (_c *OrderRepository_Create_Call) Return(_a0 error) *OrderRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Create_Call) RunAndReturn(run func(context.Context, *domain.Order) error) *OrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, orderUUID
func (_m *OrderRepository) Get(ctx context.Context, orderUUID string) (*domain.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderRepository_Expecter) Get(ctx interface{}, orderUUID interface{}) *OrderRepository_Get_Call {
	return &OrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderUUID)}
}

func (_c *OrderRepository_Get_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_Get_Call) Return(_a0 *domain.Order, _a1 error) *OrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.Order, error)) *OrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, order
func (_m *OrderRepository) Update(ctx context.Context, order *domain.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - order *domain.Order
func (_e *OrderRepository_Expecter) Update(ctx interface{}, order interface{}) *OrderRepository_Update_Call {
	return &OrderRepository_Update_Call{Call: _e.mock.On("Update", ctx, order)}
}

func (_c *OrderRepository_Update_Call) Run(run func(ctx context.Context, order *domain.Order)) *OrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Order))
	})
	return _c
}

func (_c *OrderRepository_Update_Call) Return(_a0 error) *OrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Update_Call) RunAndReturn(run func(context.Context, *domain.Order) error) *OrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
