package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"

	paymentv1 "github.com/Daniil-Sakharov/RocketFactory/shared/pkg/proto/payment/v1"

	apiv1 "github.com/Daniil-Sakharov/RocketFactory/payment/internal/api/payment/v1"
	paymentService "github.com/Daniil-Sakharov/RocketFactory/payment/internal/service/payment"
)

const grpcPort = 50052

func main() {
	// –°–æ–∑–¥–∞–µ–º TCP listener
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", grpcPort))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–ª—É—à–∞–Ω–∏—è tcp —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É %d: %v\n", grpcPort, err)
	}
	defer func() {
		if err := lis.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è tcp —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É %d: %v\n", grpcPort, err)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º Service —Å–ª–æ–π
	service := paymentService.New()

	// –°–æ–∑–¥–∞–µ–º API —Å–ª–æ–π
	api := apiv1.New(service)

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	grpcServer := grpc.NewServer()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API
	paymentv1.RegisterPaymentServiceServer(grpcServer, api)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è grpcurl
	reflection.Register(grpcServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ PaymentService gRPC server listening on port %d\n", grpcPort)
		if err := grpcServer.Serve(lis); err != nil {
			log.Fatalf("Failed to serve: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë Shutting down PaymentService gRPC server...")
	grpcServer.GracefulStop()
	log.Println("‚úÖ PaymentService stopped")
}
